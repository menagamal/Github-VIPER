//
//  DetailsPresenter.swift
//  GithubVIPER
//
//  Created Mena Gamal on 8/15/20.
//  Copyright © 2020 Mena Gamal. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailsPresenter: BasePresenter,DetailsPresenterProtocol {
    
    weak internal var view: DetailsViewProtocol?
    var interactor: DetailsInteractorInputProtocol?
    
    private let router: DetailsRouterProtocol
    
    init(view: DetailsViewProtocol, interactor: DetailsInteractorInputProtocol?, router: DetailsRouterProtocol) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }
    func loadLayout() {
        interactor?.fetchDetails()
    }
    func openInGithub() {
        self.router.openInGithub(url: interactor?.repoUrl() ?? "")
    }
}

extension DetailsPresenter: DetailsInteractorOutputProtocol {
    func didLoadRepo(repo: Repos) {
        guard let view = view else {
            return
        }
        view.labelTitle.text = repo.descriptionStr ?? ""
        view.labelLanguage.text = repo.language ?? ""
        view.labelRate.text = "\(repo.score ?? 0 ) Stars"
        view.labelFork.text = "\(repo.forks_count ?? 0 ) Stars"
        if let dateStr = repo.created_at {
            let newString = dateStr.replacingOccurrences(of: "T", with: " ", options: .literal, range: nil)
            let finalString = newString.replacingOccurrences(of: "Z", with: " ", options: .literal, range: nil)
            
            let date = finalString.dateFromString(format: DateFormat.mm_dd_yyyy_hh_mm.get())
            let string = date.dateToString(format: DateFormat.dd_MM_yyyy.get())
            let diffInYears = yearsBetweenDate(startDate: date, endDate: Date())
            view.labelCreateAt.text = "Created \(diffInYears) years ago at \(string)"
        } else {
            view.labelCreateAt.text = repo.created_at ?? ""
        }
        
        view.loadTitle(str: repo.name ?? "" )
    }
    
    func yearsBetweenDate(startDate: Date, endDate: Date) -> Int {

        let calendar = Calendar.current

        let components = calendar.dateComponents([.year], from: startDate, to: endDate)

        return components.year ?? 0
    }
    
    
}
